<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis</title>
      <link href="/article/3135569683/"/>
      <url>/article/3135569683/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-管道、事务、Lua-脚本对比"><a href="#Redis-管道、事务、Lua-脚本对比" class="headerlink" title="Redis 管道、事务、Lua 脚本对比"></a>Redis 管道、事务、Lua 脚本对比</h1><p><code>Redis</code> 提供三种将客户端多条命令打包发送给服务端执行的方式： <code>Pipelining(管道)</code> 、 <code>Transactions(事务)</code> 和 <code>Lua Scripts(Lua 脚本)</code>。本文不会过细的讨论三种方式的基础知识，将从这三种方式的 <code>优势</code> 、 <code>局限性</code> 和 <code>原子性</code> 方面展开讨论</p><h1 id="Pipelining（管道）"><a href="#Pipelining（管道）" class="headerlink" title="Pipelining（管道）"></a>Pipelining（管道）</h1><p>Redis 管道是三者之中最简单的，当客户端需要执行多条 <code>redis</code> 命令时，可以通过管道一次性将要执行的多条命令发送给服务端，其作用是为了降低 <code>RTT(Round Trip Time)</code> 对性能的影响，比如我们使用 <code>nc</code> 命令将两条指令发送给 <code>redis</code> 服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">printf</span> <span class="string">&quot;INCR x\r\nINCR x\r\n&quot;</span> | nc localhost 6379</span></span><br><span class="line">:1</span><br><span class="line">:2</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>可以看到，管道只是简单的将多个命令拼接在一起，命令之间用换行符（&#x2F;r&#x2F;n）分割，并没有在第一条命令前或最后一条命令后面添加开始&#x2F;结束标志位</p><p><code>redis</code> 服务端接收到管道发送过来的多条命令后，会一直执命令，并将命令的执行结果进行缓存，直到最后一条命令执行完成，再所有命令的执行结果一次性返回给客户端</p><h2 id="Pipelining-的优势"><a href="#Pipelining-的优势" class="headerlink" title="Pipelining 的优势"></a>Pipelining 的优势</h2><p>在性能方面， <code>Pipelining</code> 有下面两个优势：</p><ul><li>将多条命令打包一次性发送给服务端，减少了客户端与服务端之间的网络调用次数，节省了 <code>RTT</code> </li><li>避免了上下文切换，当客户端&#x2F;服务端需要从网络中读写数据时，都会产生一次系统调用，系统调用是非常耗时的操作，其中设计到程序由用户态切换到内核态，再从内核态切换回用户态的过程。当我们执行 10 条 <code>redis</code> 命令的时候，就会发生 10 次用户态到内核态的上下文切换，但如果我们使用 <code>Pipeining</code> 将多条命令打包成一条一次性发送给服务端，就只会产生一次上下文切换</li></ul><p></p><h2 id="Pipelining-原子性"><a href="#Pipelining-原子性" class="headerlink" title="Pipelining 原子性"></a>Pipelining 原子性</h2><p>我们都知道， <code>redis</code> 执行命令的时候是单线程执行的，所以 <code>redis</code> 中的所有命令都具备原子性，这意味着 <code>redis</code> 并不会在执行某条命令的中途停止去执行另一条命令</p><p>但是 <code>Pipelining</code> 并不具备原子性，想象一下有两个客户端 <code>client1</code> 和 <code>client2</code> 同时向 <code>redis</code> 服务端发送 <code>Pipelining</code> 命令，每条 <code>Pipelining</code> 包含 5 条 <code>redis</code> 命令。 <code>redis</code> 可以保证 <code>client1</code> 管道中的命令始终是顺序执行的， <code>client2</code> 管道中的命令也是一样，始终按照管道中传入的顺序执行命令</p><p>但是 <code>redis</code> 并不能保证等 <code>client1</code> 管道中的所有命令执行完成，再执行 <code>client2</code> 管道中的命令，因此，在服务端中的命令执行顺序有可能是下面这种情况</p><p><img src="/image/article/Redis/20230504103058.png" alt="20230504103058"></p><p>这种行为显示 <code>Pipelining</code> 在执行的时候并不会阻塞服务端。即使 <code>client1</code> 向客户端发送了包含多条指令的 <code>Pipelining</code> ，其他客户端也不会被阻塞，因为他们发送的指令可以插入到 <code>Pipelining</code> 中间执行</p><h2 id="Pipelining-局限性"><a href="#Pipelining-局限性" class="headerlink" title="Pipelining 局限性"></a>Pipelining 局限性</h2><p>只有在 <code>Pipelining</code> 内所有命令执行完后，服务端才会把执行结果通过数组的方式返回给客户端。在执行 <code>Pipelining</code> 内的命令的时候，如果某些指令执行失败， <code>Pipelining</code> 仍会继续执行</p><p>比如下面的例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">printf</span> <span class="string">&quot;SET name huangxy\r\nINCR name\r\nGET name\r\n&quot;</span> | nc localhost 6379</span></span><br><span class="line">+OK</span><br><span class="line">-ERR value is not an integer or out of range</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">huangxy</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>Pipelining</code> 中第二条指令执行失败， <code>Pipelining</code> 并不会停止，而是会继续执行，等所有命令都执行完的时候，再将结果返回给客户端，其中第二条指令返回的是错误信息</p><p><code>Pipelining</code> 的这个特性会导致一个问题，就是当 <code>Pipelining</code> 中的指令需要读取之前指令设置 key 的时候，需要额外小心，因为 key 的值有可能会被其他客户端修改。此时 <code>Pipelining</code> 的执行结果往往就不是我们所预期的</p><h2 id="Pipelining-使用场景"><a href="#Pipelining-使用场景" class="headerlink" title="Pipelining 使用场景"></a>Pipelining 使用场景</h2><ul><li>对性能有要求</li><li>需要发送多个指令到服务端</li><li>不需要上个命令的返回结果作为下个命令的输入</li></ul><p></p><h1 id="Transactions（事务）"><a href="#Transactions（事务）" class="headerlink" title="Transactions（事务）"></a>Transactions（事务）</h1><p><code>redis</code> 中的事务，跟我们之前在学关系型数据库的时候所了解到的事务概念有点区别。 <code>redis</code> 中的事务机制主要是用来对多个命令进行排队，并在最后决定是否需要执行事务中的所有命令与否</p><p>与管道不同，事务使用特殊的命令来标记事务的开始和结束（ <code>MULTI</code> 、 <code>EXEC</code> 、 <code>DISCARD</code> ）。服务器还可以对事务中的命令进行排队（这样客户端可以一次发送一条命令）。除此之外，一些第三方库还喜欢在客户端中对事务的命令进行缓存，然后通过在管道中发送整个事务的方式对其进行优化</p><h2 id="事务的优点"><a href="#事务的优点" class="headerlink" title="事务的优点"></a>事务的优点</h2><p>事务提供了 <code>WATCH</code> 命令，使我们可以实现 CAS 功能，比如通过事务，我们可以实现跟 <code>INCR</code> 命令一样的功能<br>Watch 命令是Exec命令的执行条件；也就是说，如果Watch的Key没有被修改则Redis执行事务，否则（Watch的key被其他事务修改了）事务不会被执行。<br>Watch 命令可以被调用多次，一个Watch 命令可以监控多个key。Watch 命令调用即启动监控功能，从Watch 命令开始点到执行EXEC命令终止。一旦EXEC被调用，所有的键都将不被监视，无论所讨论的事务是否被中止。关闭客户端连接也会触发所有的键被取消监视。</p><p>Redis Watch 命令给事务提供CAS机制。被Watch的Key被持续监控，如果key在Exec命令执行前有改变，那么整个事务被取消，Exec返回null表示事务没有成功。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WATCH mykey</span><br><span class="line"><span class="attr">val</span> = GET mykey</span><br><span class="line"><span class="attr">val</span> = val + <span class="number">1</span></span><br><span class="line">MULTI</span><br><span class="line">SET mykey $val</span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure><h2 id="事务的原子性"><a href="#事务的原子性" class="headerlink" title="事务的原子性"></a>事务的原子性</h2><p><code>redis</code> 事务具备原子性，当一个事务正在执行时，服务端会阻塞其接收到的其他命令，只有在事务执行完成时，才会执行接下来的命令，因此事务具备原子性</p><h2 id="事务的局限性"><a href="#事务的局限性" class="headerlink" title="事务的局限性"></a>事务的局限性</h2><p>跟 <code>Pipelining</code> 一样，只有在事务执行完成时，才会把事务中多个命令的结果一并返回给客户端，因此客户端在事务还没有执行完的时候，无法获取其命令的执行结果</p><p>如果事务中的其中一个命令发生错误，会有以下两种可能性：</p><ul><li>当发生语法错误，在执行 <code>EXEC</code> 命令的时候，事务将会被丢弃，不会执行</li><li>当发生运行时错误（操作了错误的数据类型）时， <code>redis</code> 会将报错信息缓存起来，继续执行后面的命令，并在最后将所有命令的执行结果返回给客户端（报错信息也会返回）。这意味着 <code>redis</code> 事务中没有回滚机制</li></ul><p></p><h2 id="事务使用场景"><a href="#事务使用场景" class="headerlink" title="事务使用场景"></a>事务使用场景</h2><ul><li>需要原子地执行多个命令</li><li>不需要事务中间命令的执行结果来编排后面的命令</li></ul><p></p><h1 id="Lua-脚本"><a href="#Lua-脚本" class="headerlink" title="Lua 脚本"></a>Lua 脚本</h1><p><code>redis</code> 从 2.6 版本开始引入对 Lua 脚本的支持，通过在服务器中嵌入 Lua 环境， <code>redis</code> 客户端可以直接使用 Lua 脚本，在服务端原子地执行多个 <code>redis</code> 命令</p><h2 id="Lua-脚本的优势"><a href="#Lua-脚本的优势" class="headerlink" title="Lua 脚本的优势"></a>Lua 脚本的优势</h2><p>与 <code>Pipelining</code> 和 事务不同的是，在脚本内部，我们可以在脚本中获取中间命令的返回结果，然后根据结果值做相应的处理（如 if 判断）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> new = ARGV[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> current = redis.call(<span class="string">&#x27;GET&#x27;</span>, key)</span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">false</span>) <span class="keyword">or</span> (<span class="built_in">tonumber</span>(new) &lt; <span class="built_in">tonumber</span>(current)) <span class="keyword">then</span></span><br><span class="line">  redis.call(<span class="string">&#x27;SET&#x27;</span>, key, new)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>同时， <code>redis</code> 服务端还支持对 Lua 脚本进行缓存（使用 <code>SCRIPT LOAD</code> 或 <code>EVAL</code> 执行过的脚本服务端都会对其进行缓存），下次可以使用 <code>EVALSHA</code> 命令调用缓存的脚本，节省带宽</p><h2 id="Lua-脚本的原子性"><a href="#Lua-脚本的原子性" class="headerlink" title="Lua 脚本的原子性"></a>Lua 脚本的原子性</h2><p>Lua 脚本跟事务一样具备原子性，当脚本执行中时，服务端接收到的命令会被阻塞</p><p>注意：如果Lua执行出错，可能就会出现一部分命令执行，一部分没有执行。</p><h2 id="Lua-脚本的局限性"><a href="#Lua-脚本的局限性" class="headerlink" title="Lua 脚本的局限性"></a>Lua 脚本的局限性</h2><p>Lua 脚本在功能上没有过多的限制，但要注意的一点是，Lua 脚本在执行的时候，会阻塞其他命令的执行，所以不宜在脚本中写太耗时的处理逻辑</p><h2 id="Lua-脚本的使用场景"><a href="#Lua-脚本的使用场景" class="headerlink" title="Lua 脚本的使用场景"></a>Lua 脚本的使用场景</h2><ul><li>需要原子性地执行多个命令</li><li>需要中间值来组合后面的命令</li><li>需要中间值来编排后面的命令</li><li>常用于扩展 <code>redis</code> 功能，实现符合自己业务场景的命令</li></ul><p></p><h1 id="Redis主从延迟"><a href="#Redis主从延迟" class="headerlink" title="Redis主从延迟"></a>Redis主从延迟</h1><p>首先Redis主从同步延迟原因</p><ul><li>网络延迟: 由于主从同步的过程依赖于网络传输,如果两个节点直接的网络传输比较慢,就会出现同步延迟</li><li>节点性能差异: 如果从节点cpu,内存,硬盘读写性能较差,导致从节点写如数据较慢</li><li>主节点写入速度过快: 当主节点的写入速度过快时，从节点可能没能及时复制主节点的数据，导致主从数据不一致。这种情况下，可以通过调节主节点的写入速度或者增加从节点的数量来解决。</li><li>Redis 配置不当: 如果 Redis 的配置不当，也会导致主从同步延迟。一些错误的配置，如 TCP 缓存、网络拥塞、Redis 性能参数等都可能会影响 Redis 主从同步的效率。</li></ul><p></p><p>解决方案</p><ul><li>增加从节点: 增加从节点可以解决主从节点性能差异导致的问题。当从节点的数量越多，数据同步的速度就会越快，从而有效地解决了主从同步延迟的问题。但需要注意的是，增加从节点也会带来一些额外的开销，如网络带宽、内存等。</li><li>优化 Redis 配置: 调整 Redis 的性能参数；增加 Redis 实例的数量；调整 TCP 缓存和缓冲区大小等参数；增加 Redis 缓存大小。</li></ul><p></p><p>不过根本上还是害怕数据丢失,理论上 Redis 是不推荐存储重要数据,就是丢失了就丢失了,或者已经在数据库落库了,redis数据丢失后,可以直接从数据库读取数据后加载。不绝对依赖于redis,这样就不害怕数据丢失了</p><p>软件测试相关群加了无数个，大部分都成了水群，说着不着边际的话，吹着实现不了的牛逼，问个问题犹如石沉大海</p><h1 id="Lua语法"><a href="#Lua语法" class="headerlink" title="Lua语法"></a>Lua语法</h1><h2 id="不等于"><a href="#不等于" class="headerlink" title="不等于 ~&#x3D;"></a>不等于 ~&#x3D;</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value ~= <span class="literal">false</span> <span class="keyword">and</span> value==ARGV[<span class="number">2</span>]) <span class="keyword">then</span></span><br></pre></td></tr></table></figure><h2 id="if语法"><a href="#if语法" class="headerlink" title="if语法"></a>if语法</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(boolean_expression)  </span><br><span class="line"><span class="keyword">then</span>  </span><br><span class="line">   <span class="comment">--[ 如何条件为真，则执行此处代码。 --]  </span></span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">   <span class="comment">--[ 如何条件为假，则执行此处代码。 --]  </span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">```    </span><br><span class="line">  </span><br><span class="line">当布尔表达式为真时，执行 <span class="keyword">if</span> 语句的代码块；如果条件为假时，则执行 <span class="keyword">else</span> 语句的代码块。    </span><br><span class="line">Lua 语言中所有布尔真与非 <span class="literal">nil</span> 的组合的结果被当作真，而布尔假与 <span class="literal">nil</span> 组合被当作假。值得注意的是，Lua 中零被当作真，这一点与其它大部分语言不一样。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多分支 则是<span class="keyword">elseif</span>,注意：lua中<span class="keyword">elseif</span>连着写不然会报错  条件后加<span class="keyword">then</span></span><br><span class="line">```lua</span><br><span class="line"><span class="keyword">if</span> a&lt;<span class="number">5</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">6</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">7</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;7&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">8</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;8&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">9</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;other&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">3</span> <span class="keyword">and</span> a &lt;= <span class="number">9</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3到9之间&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">---------------</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">3</span>到<span class="number">9</span>之间</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line">num = num +<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">***********<span class="keyword">while</span>语句*************</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>在此再次说明，lua中没有++ – &#x3D;+ &#x3D;-等自增自减、复合运算符。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;********for语句*************&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,<span class="number">5</span> <span class="keyword">do</span><span class="comment">--默认递增 i会默认+1</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">********<span class="keyword">for</span>语句*************</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果想自定义增量 直接逗号后面写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span> <span class="keyword">do</span><span class="comment">--如果想自定义增量 直接逗号后面写</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="Redis-与-Lua-使用中的小问题"><a href="#Redis-与-Lua-使用中的小问题" class="headerlink" title="Redis 与 Lua 使用中的小问题"></a>Redis 与 Lua 使用中的小问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 <a href="https://cloud.tencent.com/product/crs?from_column=20065&from=20065">Redis</a> 里执行 <code>get</code> 或 <code>hget</code> 不存在的 <code>key</code> 或 <code>field</code> 时返回值在终端显式的是 <code>(nil)</code>，类似于下面这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get test_version</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>复制</p><p>如果在 Lua 脚本中判断获取到的值是否为空值时，就会产生比较迷惑的问题，以为判断空值的话就用 <code>nil</code> 就可以了，然鹅事实却并不是这样的，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get test_version</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="variable constant_">EVAL</span> <span class="string">&quot;local a = redis.call(&#x27;get&#x27;,KEYS[1]) print(a) if a == &#x27;nil&#x27; then return 1 else return 0 end&quot;</span> <span class="number">1</span> test_version test_version</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure><p>复制</p><p>我们来看下执行 Lua 脚本返回结果的数据类型是什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get test_version</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="variable constant_">EVAL</span> <span class="string">&quot;local a = redis.call(&#x27;get&#x27;,KEYS[1]) return type(a)&quot;</span> <span class="number">1</span> test_version test_version</span><br><span class="line"><span class="string">&quot;boolean&quot;</span></span><br></pre></td></tr></table></figure><p>复制</p><p>通过上面的脚本可以看到，当 Redis 返回的结果为 <code>(nil)</code> 时候，其真实的数据类型为 <code>boolean</code>，因此我们直接判断 <code>nil</code> 是有问题的。</p><h2 id="Redis-官方文档"><a href="#Redis-官方文档" class="headerlink" title="Redis 官方文档"></a>Redis 官方文档</h2><p>通过翻阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://redis.io/commands/eval">官方文档</a>，找到下面所示的一段话，</p><p><strong>Redis to Lua</strong> conversion table.</p><ul><li>Redis integer reply -&gt; Lua number</li><li>Redis bulk reply -&gt; Lua string</li><li>Redis multi bulk reply -&gt; Lua table (may have other Redis data types nested)</li><li>Redis status reply -&gt; Lua table with a single ok field containing the status</li><li>Redis error reply -&gt; Lua table with a single err field containing the error</li><li>Redis Nil bulk reply and Nil multi bulk reply -&gt; Lua false boolean type</li></ul><p></p><p><strong>Lua to Redis</strong> conversion table.</p><ul><li>Lua number -&gt; Redis integer reply (the number is converted into an integer)</li><li>Lua string -&gt; Redis bulk reply</li><li>Lua table (array) -&gt; Redis multi bulk reply (truncated to the first nil inside the Lua array if any)</li><li>Lua table with a single ok field -&gt; Redis status reply</li><li>Lua table with a single err field -&gt; Redis error reply</li><li>Lua boolean false -&gt; Redis Nil bulk reply.</li></ul><p></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://redis.io/commands/eval">官方文档</a>，我们知道判断 Lua 脚本返回空值使用，应该直接判断 <code>true/false</code>，修改判断脚本如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get test_version</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;  <span class="variable constant_">EVAL</span> <span class="string">&quot;local a = redis.call(&#x27;get&#x27;,KEYS[1]) if a == false then return &#x27;empty&#x27; else return &#x27;not empty&#x27; end&quot;</span> <span class="number">1</span> test_version test_version</span><br><span class="line"><span class="string">&quot;empty&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h1><h2 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h2><p>实际上，redisson 使用了 两个list + 一个 sorted-set + pub&#x2F;sub 来实现延时队列，而不是单一的sort-set。</p><p>sorted-set：存放未到期的消息&amp;到期时间，提供消息延时排序功能<br>list-0：存放未到期消息，作为消息的原始顺序视图，提供如查询、删除指定第几条消息的功能（分析源码得出的，查看哪些地方有使用这个list）<br>list-q：消费队列，存放到期后的消息，提供消费</p><p><img src="/image/article/Redis/20230925155959.png" alt="20230925155959">    </p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图片</title>
      <link href="/article/2566977438/"/>
      <url>/article/2566977438/</url>
      
        <content type="html"><![CDATA[<p><img src="/image/article/%E5%9B%BE%E7%89%87/20230615231024.png" alt="20230615231024"></p><p>   ![[Pasted image 20231006232530.png]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/article/52063040/"/>
      <url>/article/52063040/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p>虚拟内存管理让每个进程都认为自己独占了整个地址空间，这个地址空间实际上是主存和磁盘地址空间的抽象，目的是为了逻辑上扩充内存容量。另外每个进程都拥有一致的虚拟内存空间简化了内存管理，不同进程的同一虚拟地址可以被内存管理单元（MMU）映射到同一物理地址上，并且保证进程之间不会互相干扰，这使得程序开发时无需考虑内存冲突的问题。</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>根据局部性原理，应用程序运行之前，没必要将全部数据装入内存，只需要装入必要的页面即可，进程运行前，采用预调页策略调入必要的页面，运行时基于请求调页策略将需要的页面从外存调入内存。通过缺页中断引起操作系统干预。</p><blockquote><p>虚拟存储器中，进程的内存映射是推迟到运行时的，也就是说，一个程序三行代码，只有第一行代码经过地址映射了，执行到第二行时就执行不到了。CPU拿到虚拟地址，然后委托MMU芯片进行地址转换，当MMU查询页表时发现 对应的页表项<strong>存在位是false</strong>，页面没有驻留内存，这时会发出缺页中断（缺页异常 page fault），CPU响应中断信号，陷入内核转去处理中断。最终缺页从外存调入内存。如果内存中没有足够的物理块，则根据页面置换程序选出某个页面，如果页表项的修改为1，则将页面刷新到外存，并将物理块释放。当由足够的内存资源时，则启动磁盘IO，根据目标页面的页表项查出页面所在的外存地址，将副本调入内存。IO完成后，操作系统修改页表项存在位为1，并且写入物理块号。并将物理块与目标页面进行映射（其实就是修改页表）。刷新TLB，恢复上下文，重新执行引起缺页中断的命令（会再次查询页表）（快表刷新了，没有命中，再次查询页表）</p></blockquote><p>系统抖动是频繁缺页中断的表现，如果抛开操作系统层面，服务器抖动通常是由于<strong>内存不够用，（运行的程序）进程（线程）太多</strong>。过多的缺页导致很多进程等待磁盘IO将页面调入的内存而主动放弃CPU，CPU利用率很低。可以考虑主动暂停一部分进程的运行（暂时从内存中取得一些进程）或者限制进程的创建。如果考虑OS，则全局置换算法会导致抖动，因为一个进程缺页会抢占别人的物理块，导致别人页缺页，缺页太多导致排队过长，磁盘利用率提升，CPU利用率下降。而CPU利用率下降，可能导致OS错误的创建更多进程。可以采用局部置换算法。也可以在CPU调度中使用工作集算法，将程序的全部<strong>工作集——任意一个时刻T，都会存在一个集合，包含所有最近K次内存访问过的页面</strong>全部装入内存（进程在某段时间内实际所要访问页面的集合），预调页策略也一定程度上依赖工作集。</p><hr><blockquote></blockquote><p>虚拟存储技术是指：当进程运行时，先将其一部分装入内存，另一部分暂留在磁盘，当要执行的指令或访问的数据不在内存时，由操作系统自动完成将它们从磁盘调入内存的工作。<br>缺页中断：虚拟地址没有和物理地址产生映射关系时，通知操作系统调入缺页页面的信号<br>缺页中断和一般中断比有一些特点：一条<strong>指令执行期间</strong>可能产生<strong>多次</strong>缺页中断、<strong>指令执行期间</strong>可以产生和处理缺页中断、缺页中断恢复后会<strong>再次执行原指令</strong>（访问页表），而不是向下执行。</p><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><ol><li>最佳置换算法(OPT) : 淘汰掉未来一段时间内不再访问或者访问最少的页面</li><li>先进先出置换算法(FIFO) : 淘汰掉最先进入内存的页面 ( 存在 Belady现象 , 也就是为进程分配的物理块增大时 , 缺页次数不减反增)</li><li>最近最久未使用置换算法(LRU) : 淘汰最近最久未使用的页面。用页表中的访问字段记录该页面自上次被访问以来经历的时间t，用于判断是否要淘汰。</li><li>时钟置换算法(Clock) : 用页表中的访问位记录是否被访问过，再将页面都通过链表指针链接成一个循环队列，执行页面置换的时候，遍历链表，如果访问位为0，则置换，如果为1，则标记为0，最多循环完一轮，肯定找到一个位置用于置换。</li><li>改进型的时钟置换算法 : 在时钟置换算法的基础上，增加一个修改位，优先置换近期未被访问过且未被修改过的页面。<br>​ i. 第一轮：找(0, 0)且不修改任何标志位，找不到再找第二轮; （淘汰最近没访问且没修改）</li></ol><p>​ ii. 第二轮：找(0,1)，找的过程中将访问位置为0，找不到再第三轮。（淘汰最近没访问但修改过）</p><p>​ iii. 第三轮：找(0, 0)且不修改任何标志位，找不到再找第四轮; （淘汰最近访问过但没修改）</p><p>​ iiii. 第四轮：找(0, 1)。因为第二轮已经将访问位全部置为0了，这是找(0, 1)肯定能找到。（淘汰访问过也修改过的）</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题LiveForCode介绍</title>
      <link href="/article/1112885395/"/>
      <url>/article/1112885395/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，他基于 <a href="https://nodejs.org/en/">Node.js</a>。通过 Hexo 你可以轻松地使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。  </p><blockquote><p>你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo  </p></blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。其中，一份位于 Hexo 根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。  </p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><a href="https://www.notes.worstone.cn/">Hexo - Live For Code</a>  </p><h2 id="安装Live-For-Code"><a href="#安装Live-For-Code" class="headerlink" title="安装Live For Code"></a>安装Live For Code</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至 Hexo 根目录的 themes 目录下，然后修改下配置文件即可。具体到 LiveForCode 来说，安装步骤如下。  </p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git，建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新，而不用再次下载压缩包替换。  </p><ol><li><p>克隆最新版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git Checkout 代码：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/first19326/hexo-liveforcode</span><br></pre></td></tr></table></figure><p>将克隆下来的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li><li><p>下载稳定版本<br>前往 LiveForCode 版本发布页面。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。<br>解压所下载的压缩包，并将解压后的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。</p></li></ol><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当 克隆&#x2F;下载 完成后，打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 <code>LiveForCode</code>。  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">LiveForCode</span></span><br></pre></td></tr></table></figure><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。  </p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。<br>当命令行输出中提示出： <code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code> 此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。  </p><h2 id="站点设定"><a href="#站点设定" class="headerlink" title="站点设定"></a>站点设定</h2><p>在 <strong>站点配置文件</strong> 中，我修改了标签归档页面、分类归档页面以及文章归档页面的路径，如果大家使用默认的路径，则需要修改 <strong>主题配置文件</strong> 中的菜单设置。  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">category</span></span><br></pre></td></tr></table></figure><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>由于 <strong>主题配置文件</strong> 可能有所改动，就不在这里给大家详细说明，我会在 <strong>主题配置文件</strong> 中添加适当的注释，麻烦大家参考页面以及注释内容进行修改。  </p><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="Abbrlink"><a href="#Abbrlink" class="headerlink" title="Abbrlink"></a>Abbrlink</h3><p>Hexo 默认的文章链接是以时间和文件名称命名的，如果文件名称是中文，那么文章链接会被转译，而转义后的链接很长，并且也不美观。<a href="https://github.com/rozbo/hexo-abbrlink">Hexo-Abbrlink</a> 插件基于文章的标题自动为文章生成固定的链接。</p><p>1.安装 Hexo-Abbrlink 插件。前往站点根目录，执行命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>2.编辑 <strong>站点配置文件</strong>，修改以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span> </span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure><p>3.编辑 <strong>站点配置文件</strong>，新增以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>        <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>Hexo-Abbrlink 插件主要的设置选项：</p><ul><li><p>算法（alg）：目前支持 <code>crc16</code> 和 <code>crc32</code> 算法，默认值为 <code>crc16</code>。</p></li><li><p>形式（rep）：生成的链接可以是十进制（<code>dec</code>）格式，也可以是十六进制（<code>hex</code>）格式，默认值为十进制（<code>dec</code>）格式。</p></li></ul><p>生成的链接地址（参考）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://notes.worstone.cn/article/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://notes.worstone.cn/article/65535.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc32 &amp; hex</span><br><span class="line">https://notes.worstone.cn/article/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://notes.worstone.cn/article/1690090958.html</span><br></pre></td></tr></table></figure><h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>1.前往 <a href="https://www.algolia.com/">Algolia</a> 注册页面，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。<br>2.Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 <code>Hexo Algolia</code> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure><p>3.编辑 <strong>站点配置文件</strong> ，新增以下配置：  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">applicationID:</span> <span class="string">&#x27;applicationID&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;apiKey&#x27;</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure><p>注：这里的 <strong>apiKey</strong> 为 <code>Search-Only API Key</code><br>4.当配置完成，在站点根目录下执行一下命令更新 Index。请注意观察命令的输出。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=Admin API Key</span><br><span class="line">hexo algolia</span><br></pre></td></tr></table></figure><p>5.Hexo Algolia 命令设置选项  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --dry-run       Does not push content to Algolia (default: false).</span><br><span class="line">  --flush         Resets the Algolia index before starting the indexation (default: false).</span><br><span class="line">  --indexing-key  An algolia API key with add/delete records permissions.</span><br><span class="line">              It should be different than the search-only API key configured in _config.yml.</span><br><span class="line">  --layouts       A comma-separated list of page layouts to index (default: &quot;page&quot;).</span><br></pre></td></tr></table></figure><p>说明：<br><code>--flush</code> 如果是 <code>false</code> 则每一次都会直接添加内容到 Algolia 相关的 Index 中，如果不是第一次提交，则将其设置为 <code>true</code><br><code>--layouts</code> 如果使用默认设置，提交的时候会将分类归档、标签归档、赞赏、留言板等页面内容提交到 Algolia， 在搜索的时候，将会搜索到分类归档、标签归档、赞赏、留言板等页面内容，建议使用时将其设置为 <code>post</code>。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia --flush true --layouts post</span><br></pre></td></tr></table></figure><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p><a href="https://vercel.com/">Vercel</a> 是一个开箱即用的网站托管平台，方便开发者快速部署自己的网站。它在全球都拥有 CDN 节点，因此比 Github 官方自带的 Github Pages 更加稳定，访问速度更快。</p><h4 id="Vercel-部署方式"><a href="#Vercel-部署方式" class="headerlink" title="Vercel 部署方式"></a>Vercel 部署方式</h4><p>进入到 Vercel 官网后，可以选择使用 Github 进行授权登录。Vercel 部署有两种方式（<strong>推荐第一种方式</strong>）：</p><p>1.利用 Vercel 的 Hexo 模板进行部署。</p><blockquote><p>特别说明 使用这种方式需要已经安装 Hexo。<font color="red">不需要</font> 进行 Hexo 初始化，即 <code>hexo init</code> 。</p></blockquote><p>选择 <strong>Clone Template</strong>，点击下方的 <strong>Browse All Templates</strong>，然后找到 <strong>Hexo</strong> 模版。</p><p><img src="/image/article/1112885395/template.png" alt="template"></p><p>选择模板后，进入到创建仓库界面，设置好仓库名称，然后点击 <strong>Create</strong> 即可。至于是否设置成私有仓库，根据个人意愿选择，目前 Github 的私有仓库是 <strong>免费</strong> 的。</p><p><img src="/image/article/1112885395/repository.png" alt="repository"></p><p>等待 Vercel 部署完成，跳转到部署成功的页面。点击 <strong>Go to Dashboard</strong> 即可查看刚刚的项目。</p><p><img src="/image/article/1112885395/congratulations.png" alt="congratulations"></p><p>部署好的模板项目是 Hexo 默认的主题，需要将 Github 对应的项目下载到本地进行修改。项目想要在本地进行运行，需要<strong>安装相关依赖</strong>，通过<code>npm install</code> 或 <code>cnpm install</code> 或<code>yarn install</code>皆可进行安装。依赖安装完成后，即可进行主题安装等相关操作。</p><p>2.通过 GitHub 托管 <code>hexo deploy</code> 生成的网页文件进行部署。</p><p>创建新的项目，选择 <strong>Import Git Repository</strong>，然后选择 Hexo 网站对应的仓库，点击 <strong>Import</strong>。</p><p><img src="/image/article/1112885395/import.png" alt="import"></p><p>跳转到 <strong>Configure Project</strong> 页面，项目名称可以自行修改，其他的自定义选项，<strong>建议不要修改</strong>，除非有什么特殊需求。</p><p><img src="/image/article/1112885395/configure.png" alt="configure"></p><p>点击 <strong>Deploy</strong>，然后等待部署完成即可。部署完成后，Vercel 会提供几个默认的域名，可以在对应项目中查看。</p><h4 id="Vercel-自定义域名"><a href="#Vercel-自定义域名" class="headerlink" title="Vercel 自定义域名"></a>Vercel 自定义域名</h4><p>进入到 Vercel 的 <strong>Dashboard</strong>，然后点击对应项目，然后点击 <strong>View Domains</strong>，进入到项目的 <strong>Domains</strong> 界面，在这里可以进行域名管理。如果想要使用 Vercel 提供的二级域名，可以直接添加 <code>xxx.vercel.app</code>；如果想要绑定自己的域名，在添加域名后，会提示 <strong>Invalid Config</strong>，需要添加 DNS 解析。</p><h4 id="Vercel-DNS-解析"><a href="#Vercel-DNS-解析" class="headerlink" title="Vercel DNS 解析"></a>Vercel DNS 解析</h4><p>1.如果是根域名，请在你的 DNS 解析处添加 <strong>A 记录</strong>，指向 <code>76.76.21.21</code>。</p><p>2.如果是子域名，请在你的 DNS 解析处添加 <strong>CNAME 记录</strong>，指向 <code>cname.vercel-dns.com</code>。</p><p>添加 DNS 解析记录之后，在 <strong>Vercel Domains</strong> 界面对应域名下方显示对号即表明验证成功。</p><p><img src="/image/article/1112885395/invalid.png" alt="invalid"></p><blockquote><p>特别说明 Github 仓库的分支尽量选择 <strong>master</strong>，否则 Github 推送之后，还需到 Vercel 手动部署项目。</p></blockquote><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>1.安装 <code>Hexo-Feed</code> 插件。前往站点根目录，执行命令安装：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>2.根据个人需求，编辑 <strong>站点配置文件</strong> ：  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="文章数据统计"><a href="#文章数据统计" class="headerlink" title="文章数据统计"></a>文章数据统计</h3><h4 id="基于-Valine-js-实现方式"><a href="#基于-Valine-js-实现方式" class="headerlink" title="基于 Valine.js 实现方式"></a>基于 <code>Valine.js</code> 实现方式</h4><p>在文章列表页面加载 <code>Valine.js</code>， 只要 Valine 配置项中的 <code>el</code> 元素不存在即不会加载评论框相关内容。</p><p>1.文章评论数统计<br>Valine 会自动查找页面中 class 值为 <code>valine-comment-count</code> 的元素，获取其 <code>data-xid</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>valine-comment-count</code> 的元素里：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- data-xid 将作为查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;valine-comment-count&quot;</span> <span class="attr">data-xid</span>=<span class="string">&quot;&lt;Your/Path/Name&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.文章阅读量统计<br>Valine 从 <code>v1.2.0</code> 开始支持文章阅读量统计。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">visitor</span>: <span class="literal">true</span> <span class="comment">// 阅读量统计</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果开启了阅读量统计，Valine 会自动检测 LeanCloud 应用中是否存在 <code>Counter</code> 类，如果不存在会自动创建，无需手动创建。<br>Valine 会自动查找页面中 class 值为 <code>leancloud_visitors</code> 的元素，获取其 <code>id</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>leancloud-visitors-count</code> 的子元素里：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id 将作为查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;&lt;Your/Path/Name&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;leancloud_visitors&quot;</span> <span class="attr">data-flag-title</span>=<span class="string">&quot;Your Article Title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;leancloud-visitors-count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>特别说明 使用 <strong>国际版的 LeanCloud</strong> 的时候，需要配置 <strong>主题配置文件</strong> 中 Valine 的 <code>serverURLs</code>，内容为 LeanCloud 的 <code>Request Domain</code>，国内版则需要 <strong>域名备案</strong>。</p></blockquote><h4 id="基于-Waline-js-实现方式"><a href="#基于-Waline-js-实现方式" class="headerlink" title="基于 Waline.js 实现方式"></a>基于 <code>Waline.js</code> 实现方式</h4><p>1.文章评论数统计</p><p>详情请参见 <a href="https://waline.js.org/guide/features/comment.html">Waline 文档-评论数统计</a></p><p>2.文章阅读量统计</p><p>详情请参见 <a href="https://waline.js.org/guide/features/pageview.html">Waline 文档-浏览量统计</a></p><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>评论功能可以选择 <code>Valine.js</code> 或 <code>Waline.js</code>，配置详情参见 <a href="https://valine.js.org/">Valine</a>、<a href="https://waline.js.org/">Waline</a> 。</p><blockquote><p>特别说明 <strong>主题配置文件</strong> 中评论的数据存储如果使用 LeanCloud，则 <code>appId</code> 与 <code>appKey</code> 请大家自行配置自己的参数。另外，由于 LeanCloud <strong>不再提供默认域名</strong>，<strong>国内版本需要域名备案</strong>，否则无法使用。</p></blockquote><h3 id="赞赏页面"><a href="#赞赏页面" class="headerlink" title="赞赏页面"></a>赞赏页面</h3><p>赞赏页面使用了 <a href="https://github.com/Kaiyuan/sponsor-page">Sponsor Page</a>，并做了相关修改使其适应博客样式。感兴趣的小伙伴自行去了解吧。  </p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>音乐播放器功能是使用 <code>APlayer.js</code> 以及 <code>Meting.js</code> 实现，配置详情参见 <a href="https://aplayer.js.org/#/home">APlayer</a>、<a href="https://github.com/metowolf/MetingJS">Meting</a>。<br>主题中有两种实现方式，一种是 <code>APlayer.js</code> 结合 <code>Meting.js</code> 的实现方式，另外一种是 <code>APlayer.js</code> 单独的实现方式，两种实现方式各有优缺点：<br>第一种实现方式配置简单，并且可以从各个音乐平台解析音乐。由于是从各个平台解析，故而不是特别稳定，并且在 <code>IE</code> 浏览器中需要特殊设置。<br>第二种实现方式配置相对复杂，需要单独提供音乐相关信息，但是十分稳定，且对于 <code>IE</code> 浏览器也可兼容，无需特殊配置。<br>主题中默认以 <strong>第一种实现方式</strong> 实现，第二种实现方式为备选方案，在第一种实现方式出现问题的时候，可以切换到第二种实现方式，保证网站的稳定运行。<br>针对第二种实现方式需要 <strong>注意</strong> 的地方：<br><code>APlayer.js</code> 是基于 <code>HTML 5 Audio</code> 实现的一款音乐播放器插件，故而支持的音频格式有限，包括：<code>MP3</code>、<code>Wav</code> 以及 <code>Ogg</code> 格式，并且不同浏览器对这三种音频格式的支持也各有不同，详细信息大家参考 <a href="https://www.runoob.com/html/html5-audio.html">HTML5 Audio(音频)</a>。如果音频格式不支持，可以通过音频转换工具进行格式转换。<br><code>APlayer.js</code> 是通过 <code>XMLHttpRequest</code> 获取歌词文件，所以存在 <strong>跨域</strong> 问题。可以考虑将歌词文件放在主题文件夹 <code>LiveForCode</code> 的 <code>source</code> 文件夹下（ <strong>注意</strong> ：这里的 <code>source</code> 文件夹不是 <code>Hexo</code> 站点目录下的 <code>source</code> 文件夹），解决跨域的问题。由于 <code>jsDelivr</code> 在响应请求的时候，会添加 <code>access-control-allow-origin: *</code> 的响应标头信息，故而不存在跨域问题，也可以使用这种方式。不过需要注意的是，<code>jsDelivr</code> 对资源的大小有所限制，不可以超过 <strong>50M</strong> 。<br><code>APlayer.js</code> 获取到歌词后会将歌词中的空白行去掉，由于是单行显示歌词，所以有译文的双行歌词，只会显示下面一行歌词，可以将译文歌词拼接在歌词原文的后面解决这个问题。  </p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关于-jQuery-版本"><a href="#关于-jQuery-版本" class="headerlink" title="关于 jQuery 版本"></a>关于 jQuery 版本</h3><p>mCustomScroll 目前暂不支持 <code>jQuery3.5</code> 以及以上版本，否则会导致代码块中的滚动条失效。  </p><h3 id="Position-fixed-定位问题"><a href="#Position-fixed-定位问题" class="headerlink" title="Position: fixed 定位问题"></a>Position: fixed 定位问题</h3><p>由于背景动画的 <code>z-index</code> 为 <code>-1</code>，导致在IE浏览器中，菜单等多处 <code>position: fixed</code> 样式的部件出现闪烁抖动的问题，所以默认在IE浏览器中关闭了背景动画。如果是高版本IE，例如IE11则可在设置 -&gt; Internet选项 -&gt; 高级，将浏览中的’使用平滑滚动’选项勾掉，也可以解决这个问题。  </p><h3 id="关于-Github-Page-的使用"><a href="#关于-Github-Page-的使用" class="headerlink" title="关于 Github Page 的使用"></a>关于 Github Page 的使用</h3><p>详情请参见 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>。<br>Github Page 支持设置自己的域名，建议在 Hexo 主题的 source 文件夹下新增一个 CNAME 的文件，将自己的域名配置进去，否则每次提交的时候会覆盖掉相关域名设置。<br>在域名的解析设置中，可以使用 CNAME 解析方式，也可以使用 A 记录 的方式。如果是 A 记录 的方式，则需要检索当前 Github Page 对应的服务器 IP 地址。  </p><h3 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h3><p>CDN 可以在阿里云购买相关的 CDN 服务器，效果肯定是更好，这里使用的是 <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费的 CDN 加速服务。但是有一个弊端，如果修改代码的时候没有 Github 的相关版本信息，则很容易读取到 jsDelivr 的缓存数据，而不是修改后的最新代码。至于这个缓存时间，我也拿捏不准。不过免费而且效果不错的东西，大家就不要要求太多了。 </p><h3 id="关于-Valine"><a href="#关于-Valine" class="headerlink" title="关于 Valine"></a>关于 Valine</h3><p>由于很多小伙伴直接使用主题中 Valine 的 <code>appId</code> 以及 <code>appKey</code>，而且 Valine 默认设置的 <code>path</code> 为 <code>window.location.pathname</code>，会导致大家的留言板数据出现异常。所以这里还是建议大家设置自己的 LeanCloud，<strong>推荐使用国际版</strong> ，后续如果想要添加邮件提醒，这样会方便很多。</p><h3 id="关于-Waline"><a href="#关于-Waline" class="headerlink" title="关于 Waline"></a>关于 Waline</h3><p>Valine 评论功能简单，不支持评论管理以及通知功能，虽说可以通过 <a href="https://github.com/DesertsP/Valine-Admin">Valine-Admin</a> 实现评论管理以及通知等功能，但非常麻烦。其他的评论系统有些需要服务器，例如 Artalk。所以选择集成了 Waline，通过在 Vercel 部署以达到无需服务器的目的。如果考虑到 <strong>访问速度</strong> 的问题，可以选择部署在 <strong>华为云</strong> 的 Serverless 上，每个月都有免费的资源。</p><h3 id="关于-Vercel"><a href="#关于-Vercel" class="headerlink" title="关于 Vercel"></a>关于 Vercel</h3><p>Github Pages 内容部署的服务器在美国，可能会导致国内部分地区加载速度较慢，大家可以将项目部署到 <strong>Vercel</strong> ，来提高网站的访问速度，同时也 <strong>方便百度对站点内容进行收录</strong> 。如果 <strong>网站域名已经备案</strong> ，则可以考虑 <strong>国内的阿里云或腾讯云的相关产品</strong> ，效果会更好。<br>目前 Vercel 提供的默认 <code>.app</code> 域名由于 <strong>DNS 污染</strong> 国内无法访问，<strong>需要添加自己的域名（无需备案）</strong>。</p><h3 id="Cannot-read-property-‘LongCang’-of-undefined"><a href="#Cannot-read-property-‘LongCang’-of-undefined" class="headerlink" title="Cannot read property ‘LongCang’ of undefined"></a>Cannot read property ‘LongCang’ of undefined</h3><p>这个问题比较常见，是主题文件路径不正确导致的。因为很多小伙伴都询问这个问题，所以在这里进行一个说明。    </p><p><img src="/image/article/1112885395/structure.png" alt="Hexo-LiveForCode"></p><p>直接从 Github 下载 <code>Zip</code> 格式的文件解压后或 Github <code>Clone</code> 后的文件结构应该如上图所示。这里需要注意，是将解压后文件夹中的 <code>LiveForCode</code> 文件夹复制到 <code>Hexo</code> 的 <code>themes</code> 文件夹下，而不是将解压后的 <code>Hexo-LiveForCode</code> 复制到 <code>themes</code> 文件夹下。</p><h3 id="标签、分类、归档等页面-404-或-Cannot-GET"><a href="#标签、分类、归档等页面-404-或-Cannot-GET" class="headerlink" title="标签、分类、归档等页面 404 或 Cannot GET"></a>标签、分类、归档等页面 <code>404</code> 或 <code>Cannot GET</code></h3><p>由于 <code>Hexo</code> 的标签、分类、归档等页面的目录修改为了 <code>tag</code>、<code>category</code>、<code>archive</code>，故使用默认的 <strong>站点配置文件</strong> 会出现这个问题。需要将 <strong>站点配置文件</strong> 中的 <code>Directory</code> 相关配置修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">category</span></span><br></pre></td></tr></table></figure><h2 id="阶段计划"><a href="#阶段计划" class="headerlink" title="阶段计划"></a>阶段计划</h2><ul><li>添加本地搜索</li><li>加入服务状态页面</li><li>添加 <code>即刻短文</code> 功能</li><li>标签外挂（Tag Plugins）</li><li>卡片式风格（文章列表）</li><li>图片懒加载</li><li>使用变量统一样式文件</li><li>添加 Hexo-Admin</li><li>使用 Vue.js 重构项目</li><li>加入 Pjax，优化页面加载速度</li><li>补充国际化支持语言</li><li>重新编写部署教程，添加视频教程</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于我还是一名小白，可能还有很多问题无法解决，这个主题也可能存在很多不尽如人意的地方，在细节方面我也会尽力地去修改，也欢迎大家提出自己的问题，以及主题的相关建议，也欢迎大家提交代码。如果觉得这个主题不错，欢迎大家去使用。当然了，如果能赞赏我一下，我也是不介意的。(●ˇ∀ˇ●)  </p><p>这个主题可定制的地方目前可能比较少，欢迎大家修改，也希望这个主题能够越来越好看，也希望越来越多的人能够喜欢。  </p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/article/16107/"/>
      <url>/article/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
